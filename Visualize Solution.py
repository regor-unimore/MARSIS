import numpy as np
import matplotlib.pyplot as plt
import argparse

#  Define INSTANCE
parser = argparse.ArgumentParser(description="Code to visualize the solution generated by the model")
parser.add_argument('instance_name', type=str, help="Name of the instance")
args = parser.parse_args()
name = args.instance_name

#  name = 'M_10_067_4'

name_char = name.split('_')

#  Parameters
G = name_char[1]
L = name_char[2]
NC = name_char[3]
gra = {'01': 1000, '02': 2000, '03': 3000, '05': 5000, '10': 10000}
nP = 113651

#  South Pole contour
nC = 12821
co = []
cox = np.zeros(nC)
coy = np.zeros(nC)
with open("SPLD_contour.dat", "r") as file:
    for i in range(nC):
        temp = file.readline().split(",")
        cox[i] = float(temp[0])
        coy[i] = float(temp[1])
        co.append((cox[i], coy[i]))

#  Information on PIs
x = []
y = []
PIAV = []
wPI = []
with open(f"{name}/{name}(1).txt", 'r') as file:
    lines = file.readlines()
    nPI = len(lines)
    for line in lines:
        line = list(line.strip().split(' '))
        x.append(float(line[1]))
        y.append(float(line[2]))
        PIAV.append(int(line[3]))
        wPI.append(int(line[6]))

#  PI in observations
with open(f"{name}/{name}(2).txt", "r") as file:
    PIinO = [[int(i) for i in line.strip().split("\t")]
            if line != "" and line != "\n" else [] for line in file.readlines()]

# Solution of the Model
selected = [0]*nP
visited = [0]*nPI[G]
with open(f"ModelSolution_{name}.txt", "r") as file:  # visited or not
    lines = file.readlines()
    lines = lines[8:]
    for i in range(nP):
        selected[i] = float(lines[i])
        if selected[i] == 1:
            for j in PIinO[i]:
                visited[j] = 1

# Draw contour
plt.xlim(1.1 * min(cox), 1.1 * max(cox))
plt.ylim(1.1 * min(coy), 1.1 * max(coy))
plt.plot(cox, coy)

fig = plt.gcf()  # get the current figure
ax = fig.gca()  # get the current axes

# Draw PIs according to the AOIs
for i in range(nPI[G]):
    if visited[i] == 1 and wPI[i] == 1:
        ax.add_artist(
            plt.Rectangle((x[i], y[i]), gra[G], gra[G], lw=None, facecolor='blue', edgecolor=None))

    if visited[i] == 1 and wPI[i] == 0:
        ax.add_artist(
            plt.Rectangle((x[i], y[i]), gra[G], gra[G], lw=None, facecolor='gray', edgecolor=None))

plt.grid(visible=False)
plt.savefig(f"Model_{name}.pdf")
plt.show()